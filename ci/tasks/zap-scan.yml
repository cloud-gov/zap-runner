---
platform: linux

image_resource:
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: ((repo_name))
    aws_region: us-gov-west-1
    tag: ((runner_tag))

inputs:
  - name: zap-config
  - name: ((repo_name))

outputs:
  - name: zap-report

params:
  SCAN_MODE:
  CREDHB_CRED:
  repo_name:
  runner_tag:

run:
  path: bash
  args:
    - -ceux
    - |
      #!/usr/bin/env bash

      echo "Scanning all URLs in context '${SCAN_MODE}' as a single batch"

      # 1) Extract credentials
      CLIENT_ID=$(jq -r .client_id <<<"$CREDHB_CRED")
      CLIENT_SECRET=$(jq -r .client_secret <<<"$CREDHB_CRED")
      TOKEN_URI=$(jq -r .token_uri <<<"$CREDHB_CRED")

      # 2) Gather URLs for this context
      mapfile -t URLS < <(
        tail -n +2 zap-config/urls.csv | \
        awk -F',' -v ctx="$SCAN_MODE" '$1==ctx { print $2 }'
      )

      if [ ${#URLS[@]} -eq 0 ]; then
        echo "No URLs for context '$SCAN_MODE', skipping."
        exit 0
      fi

      echo "URLs to scan: ${URLS[*]}"

      # 3) Build zap-baseline.py target flags
      TARGET_ARGS=()
      for url in "${URLS[@]}"; do
        TARGET_ARGS+=( -t "$url" )
      done

      # 4) Create output directory
      mkdir -p zap-report

      # 5) Define output files
      HTML_OUT="zap-report/${SCAN_MODE}.html"
      JSON_OUT="zap-report/${SCAN_MODE}.json"
      XML_OUT="zap-report/${SCAN_MODE}.xml"

      # 6) Run ZAP baseline with HTML, JSON, and XML outputs
      zap-baseline.py \
        "${TARGET_ARGS[@]}" \
        -c zap-config/zap.yaml \
        -r "$HTML_OUT" \
        -J "$JSON_OUT" \
        -x "$XML_OUT" \
        -t "${CLIENT_ID}:${CLIENT_SECRET}:${TOKEN_URI}"

      echo "Context scan '${SCAN_MODE}' complete: $HTML_OUT, $JSON_OUT, $XML_OUT"
